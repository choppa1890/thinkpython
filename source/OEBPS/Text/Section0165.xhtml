<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Classes and functions</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}
  /*]]>*/
  </style>
</head>

<body class="calibre">
  <h2 class="section sigilNotInTOC" id="heading_id_9"><a class="calibre14" id="toc180"></a><a class="calibre14" id="htoc198"><span class="calibre18">16.7</span></a><span class="calibre18">&nbsp;&nbsp;Exercises</span></h2>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;6</b>&nbsp;&nbsp; <em class="calibre9">Write a function called <code class="calibre7">mul_time</code> that takes a Time object and a number and returns a new Time object that contains the product of the original Time and the number.</em></span>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Then use <code class="calibre7">mul_time</code> to write a function that takes a Time object that represents the finishing time in a race, and a number that represents the distance, and returns a Time object that represents the average pace (time per mile).</em></span></p>

    <p class="calibre15"><a class="calibre16" id="@default1485"></a></p>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;7</b>&nbsp;&nbsp;</span>

    <p class="calibre15"><a class="calibre16" id="@default1486"></a> <a class="calibre16" id="@default1487"></a></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Write a class definition for a Date object that has attributes <tt class="calibre7">day</tt>, <tt class="calibre7">month</tt> and <tt class="calibre7">year</tt>. Write a function called <code class="calibre7">increment_date</code> that takes a Date object, <tt class="calibre7">date</tt> and an integer, <tt class="calibre7">n</tt>, and returns a new Date object that represents the day <tt class="calibre7">n</tt> days after <tt class="calibre7">date</tt>. Hint: “Thirty days hath September...” Challenge: does your function deal with leap years correctly? See <tt class="calibre7">wikipedia.org/wiki/Leap_year</tt>.</em></span></p>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;8</b>&nbsp;&nbsp;</span>

    <p class="calibre15"><a class="calibre16" id="@default1488"></a> <a class="calibre16" id="@default1489"></a></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">The <tt class="calibre7">datetime</tt> module provides <tt class="calibre7">date</tt> and <tt class="calibre7">time</tt> objects that are similar to the Date and Time objects in this chapter, but they provide a rich set of methods and operators. Read the documentation at <tt class="calibre7">docs.python.org/lib/datetime-date.html</tt>.</em></span></p>

    <ol class="enumerate" type="1">
      <li class="li-itemize">
        <span class="calibre4"><em class="calibre9">Use the <tt class="calibre7">datetime</tt> module to write a program that gets the current date and prints the day of the week.</em></span>

        <p class="calibre15"><a class="calibre16" id="@default1490"></a></p>
      </li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Write a program that takes a birthday as input and prints the user’s age and the number of days, hours, minutes and seconds until their next birthday.</em></span></li>
    </ol>
  </div>
</body>
</html>
