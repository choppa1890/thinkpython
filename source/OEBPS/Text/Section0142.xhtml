<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Files</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <p class="calibre15"><a class="calibre16" id="@default1243"></a> <a class="calibre16" id="@default1244"></a></p>

  <h2 class="section sigilNotInTOC" id="heading_id_5"><a class="calibre14" id="toc155"></a><a class="calibre14" id="htoc171"><span class="calibre18">14.3</span></a><span class="calibre18">&nbsp;&nbsp;Format operator</span></h2>

  <p class="calibre15"><a class="calibre16" id="@default1245"></a> <a class="calibre16" id="@default1246"></a></p>

  <p class="calibre15"><span class="calibre4">The argument of <tt class="calibre7">write</tt> has to be a string, so if we want to put other values in a file, we have to convert them to strings. The easiest way to do that is with <tt class="calibre7">str</tt>:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; x = 52
&gt;&gt;&gt; f.write(str(x))
</span></pre>

  <p class="calibre15"><span class="calibre4">An alternative is to use the <b class="calibre19">format operator</b>, <tt class="calibre7">%</tt>. When applied to integers, <tt class="calibre7">%</tt> is the modulus operator. But when the first operand is a string, <tt class="calibre7">%</tt> is the format operator.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1247"></a></p>

  <p class="calibre15"><span class="calibre4">The first operand is the <b class="calibre19">format string</b>, which contains one or more <b class="calibre19">format sequences</b>, which specify how the second operand is formatted. The result is a string.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1248"></a></p>

  <p class="calibre15"><span class="calibre4">For example, the format sequence <code class="calibre7">'%d'</code> means that the second operand should be formatted as an integer (<tt class="calibre7">d</tt> stands for “decimal”):</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; camels = 42
&gt;&gt;&gt; '%d' % camels
'42'
</span></pre>

  <p class="calibre15"><span class="calibre4">The result is the string <code class="calibre7">'42'</code>, which is not to be confused with the integer value <tt class="calibre7">42</tt>.</span></p>

  <p class="calibre15"><span class="calibre4">A format sequence can appear anywhere in the string, so you can embed a value in a sentence:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; camels = 42
&gt;&gt;&gt; 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
</span></pre>

  <p class="calibre15"><span class="calibre4">If there is more than one format sequence in the string, the second argument has to be a tuple. Each format sequence is matched with an element of the tuple, in order.</span></p>

  <p class="calibre15"><span class="calibre4">The following example uses <code class="calibre7">'%d'</code> to format an integer, <code class="calibre7">'%g'</code> to format a floating-point number (don’t ask why), and <code class="calibre7">'%s'</code> to format a string:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
</span></pre>

  <p class="calibre15"><span class="calibre4">The number of elements in the tuple has to match the number of format sequences in the string. Also, the types of the elements have to match the format sequences:</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1249"></a> <a class="calibre16" id="@default1250"></a></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
&gt;&gt;&gt; '%d' % 'dollars'
TypeError: illegal argument type for built-in operation
</span></pre>

  <p class="calibre15"><span class="calibre4">In the first example, there aren’t enough elements; in the second, the element is the wrong type.</span></p>

  <p class="calibre15"><span class="calibre4">The format operator is powerful, but it can be difficult to use. You can read more about it at <tt class="calibre7">docs.python.org/lib/typesseq-strings.html</tt>.</span></p>
</body>
</html>
