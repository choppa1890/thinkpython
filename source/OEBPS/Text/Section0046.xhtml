<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Case study: interface design</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}
  /*]]>*/
  </style>
</head>

<body class="calibre">
  <h2 class="section sigilNotInTOC" id="heading_id_14"><a class="calibre14" id="toc50"></a><a class="calibre14" id="htoc56"><span class="calibre18">4.12</span></a><span class="calibre18">&nbsp;&nbsp;Exercises</span></h2>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;1</b>&nbsp;&nbsp;</span>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Download the code in this chapter from <tt class="calibre7">thinkpython.com/code/polygon.py</tt>.</em></span></p>

    <ol class="enumerate" type="1">
      <li class="li-itemize">
        <span class="calibre4"><em class="calibre9">Write appropriate docstrings for <tt class="calibre7">polygon</tt>, <tt class="calibre7">arc</tt> and <tt class="calibre7">circle</tt>.</em></span>

        <p class="calibre15"><a class="calibre16" id="@default337"></a></p>
      </li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Draw a stack diagram that shows the state of the program while executing <tt class="calibre7">circle(bob, radius)</tt>. You can do the arithmetic by hand or add <tt class="calibre7">print</tt> statements to the code.</em></span></li>

      <li class="li-itemize"><em class="calibre9"><span class="calibre4">The version of <tt class="calibre7">arc</tt> in Section&nbsp;</span><a class="calibre3" href="#refactoring"><span class="calibre4">4.7</span></a> <span class="calibre4">is not very accurate because the linear approximation of the circle is always outside the true circle. As a result, the turtle ends up a few units away from the correct destination. My solution shows a way to reduce the effect of this error. Read the code and see if it makes sense to you. If you draw a diagram, you might see how it works.</span></em></li>
    </ol>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;2</b>&nbsp;&nbsp;</span> <a class="calibre16" id="@default338"></a>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Write an appropriately general set of functions that can draw flowers like this:</em></span></p>

    <div class="center">
      <span class="calibre4"><em class="calibre9"><img alt="" class="calibre21" src="../Images/book005.gif" /></em></span>
    </div>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You can download a solution from <tt class="calibre7">thinkpython.com/code/flower.py</tt>.</em></span></p>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;3</b>&nbsp;&nbsp;</span> <a class="calibre16" id="@default339"></a>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Write an appropriately general set of functions that can draw shapes like this:</em></span></p>

    <div class="center">
      <span class="calibre4"><em class="calibre9"><img alt="" class="calibre21" src="../Images/book006.gif" /></em></span>
    </div>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You can download a solution from <tt class="calibre7">thinkpython.com/code/pie.py</tt>.</em></span></p>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;4</b>&nbsp;&nbsp;</span> <a class="calibre16" id="@default340"></a> <a class="calibre16" id="@default341"></a> <a class="calibre16" id="@default342"></a>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">The letters of the alphabet can be constructed from a moderate number of basic elements, like vertical and horizontal lines and a few curves. Design a font that can be drawn with a minimal number of basic elements and then write functions that draw letters of the alphabet.</em></span></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You should write one function for each letter, with names <code class="calibre7">draw_a</code>, <code class="calibre7">draw_b</code>, etc., and put your functions in a file named <tt class="calibre7">letters.py</tt>. You can download a “turtle typewriter” from <tt class="calibre7">thinkpython.com/code/typewriter.py</tt> to help you test your code.</em></span></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You can download a solution from <tt class="calibre7">thinkpython.com/code/letters.py</tt>.</em></span></p>
  </div>
</body>
</html>
