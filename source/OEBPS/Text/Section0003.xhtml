<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>The way of the program</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <h2 class="section sigilNotInTOC" id="heading_id_3"><a class="calibre14" id="toc4"></a><a class="calibre14" id="htoc3">1.1</a>&nbsp;&nbsp;The Python programming language</h2>

  <p class="calibre15"><a class="calibre16" id="@default6"></a> <a class="calibre16" id="@default7"></a></p>

  <p class="calibre15">The programming language you will learn is Python. Python is an example of a <b class="calibre19">high-level language</b>; other high-level languages you might have heard of are C, C++, Perl, and Java.</p>

  <p class="calibre15">There are also <b class="calibre19">low-level languages</b>, sometimes referred to as “machine languages” or “assembly languages.” Loosely speaking, computers can only execute programs written in low-level languages. So programs written in a high-level language have to be processed before they can run. This extra processing takes some time, which is a small disadvantage of high-level languages.</p>

  <p class="calibre15"><a class="calibre16" id="@default8"></a> <a class="calibre16" id="@default9"></a> <a class="calibre16" id="@default10"></a> <a class="calibre16" id="@default11"></a> <a class="calibre16" id="@default12"></a></p>

  <p class="calibre15">The advantages are enormous. First, it is much easier to program in a high-level language. Programs written in a high-level language take less time to write, they are shorter and easier to read, and they are more likely to be correct. Second, high-level languages are <b class="calibre19">portable</b>, meaning that they can run on different kinds of computers with few or no modifications. Low-level programs can run on only one kind of computer and have to be rewritten to run on another.</p>

  <p class="calibre15">Due to these advantages, almost all programs are written in high-level languages. Low-level languages are used only for a few specialized applications.</p>

  <p class="calibre15"><a class="calibre16" id="@default13"></a> <a class="calibre16" id="@default14"></a></p>

  <p class="calibre15">Two kinds of programs process high-level languages into low-level languages: <b class="calibre19">interpreters</b> and <b class="calibre19">compilers</b>. An interpreter reads a high-level program and executes it, meaning that it does what the program says. It processes the program a little at a time, alternately reading lines and performing computations.</p>

  <div class="center"><img alt="" class="calibre21" src="../Images/book001.gif" /></div>

  <p class="calibre15"><a class="calibre16" id="@default15"></a> <a class="calibre16" id="@default16"></a> <a class="calibre16" id="@default17"></a></p>

  <p class="calibre15">A compiler reads the program and translates it completely before the program starts running. In this context, the high-level program is called the <b class="calibre19">source code</b>, and the translated program is called the <b class="calibre19">object code</b> or the <b class="calibre19">executable</b>. Once a program is compiled, you can execute it repeatedly without further translation.</p>

  <div class="center"><img alt="" class="calibre21" src="../Images/book002.gif" /></div>

  <p class="calibre15">Python is considered an interpreted language because Python programs are executed by an interpreter. There are two ways to use the interpreter: <b class="calibre19">interactive mode</b> and <b class="calibre19">script mode</b>. In interactive mode, you type Python programs and the interpreter prints the result:</p>

  <p class="calibre15"><a class="calibre16" id="@default18"></a> <a class="calibre16" id="@default19"></a></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; 1 + 1
2
</span></pre>

  <p class="calibre15"><span class="calibre4">The chevron, <tt class="calibre7">&gt;&gt;&gt;</tt>, is the <b class="calibre19">prompt</b> the interpreter uses to indicate that it is ready. If you type <tt class="calibre7">1 + 1</tt>, the interpreter replies <tt class="calibre7">2</tt>.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default20"></a></p>

  <p class="calibre15"><span class="calibre4">Alternatively, you can store code in a file and use the interpreter to execute the contents of the file, which is called a <b class="calibre19">script</b>. By convention, Python scripts have names that end with <tt class="calibre7">.py</tt>.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default21"></a></p>

  <p class="calibre15"><span class="calibre4">To execute the script, you have to tell the interpreter the name of the file. In a UNIX command window, you would type <tt class="calibre7">python dinsdale.py</tt>. In other development environments, the details of executing scripts are different. You can find instructions for your environment at the Python website <tt class="calibre7">python.org</tt>.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default22"></a></p>

  <p class="calibre15"><span class="calibre4">Working in interactive mode is convenient for testing small pieces of code because you can type and execute them immediately. But for anything more than a few lines, you should save your code as a script so you can modify and execute it in the future.</span></p>
</body>
</html>
