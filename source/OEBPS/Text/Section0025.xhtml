<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Functions</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <p class="calibre15"><a class="calibre16" id="@default212"></a> <a class="calibre16" id="@default213"></a></p>

  <h2 class="section sigilNotInTOC" id="heading_id_7"><a class="calibre14" id="toc28"></a><a class="calibre14" id="htoc33"><span class="calibre18">3.5</span></a><span class="calibre18">&nbsp;&nbsp;Adding new functions</span></h2>

  <p class="calibre15"><span class="calibre4">So far, we have only been using the functions that come with Python, but it is also possible to add new functions. A <b class="calibre19">function definition</b> specifies the name of a new function and the sequence of statements that execute when the function is called.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default214"></a> <a class="calibre16" id="@default215"></a> <a class="calibre16" id="@default216"></a></p>

  <p class="calibre15"><span class="calibre4">Here is an example:</span></p>
  <pre class="verbatim"><span class="calibre20">def print_lyrics():
    print "I'm a lumberjack, and I'm okay."
    print "I sleep all night and I work all day."
</span></pre>

  <p class="calibre15"><span class="calibre4"><tt class="calibre7">def</tt> is a keyword that indicates that this is a function definition. The name of the function is <code class="calibre7">print_lyrics</code>. The rules for function names are the same as for variable names: letters, numbers and some punctuation marks are legal, but the first character can’t be a number. You can’t use a keyword as the name of a function, and you should avoid having a variable and a function with the same name.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default217"></a> <a class="calibre16" id="@default218"></a> <a class="calibre16" id="@default219"></a></p>

  <p class="calibre15"><span class="calibre4">The empty parentheses after the name indicate that this function doesn’t take any arguments.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default220"></a> <a class="calibre16" id="@default221"></a> <a class="calibre16" id="@default222"></a> <a class="calibre16" id="@default223"></a> <a class="calibre16" id="@default224"></a></p>

  <p class="calibre15"><span class="calibre4">The first line of the function definition is called the <b class="calibre19">header</b>; the rest is called the <b class="calibre19">body</b>. The header has to end with a colon and the body has to be indented. By convention, the indentation is always four spaces (see Section&nbsp;</span><a class="calibre3" href="../Text/Section0033.xhtml#editor"><span class="calibre4">3.13</span></a><span class="calibre4">). The body can contain any number of statements.</span></p>

  <p class="calibre15"><span class="calibre4">The strings in the print statements are enclosed in double quotes. Single quotes and double quotes do the same thing; most people use single quotes except in cases like this where a single quote (which is also an apostrophe) appears in the string.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default225"></a></p>

  <p class="calibre15"><span class="calibre4">If you type a function definition in interactive mode, the interpreter prints ellipses (<em class="calibre9">...</em>) to let you know that the definition isn’t complete:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; def print_lyrics():
...     print "I'm a lumberjack, and I'm okay."
...     print "I sleep all night and I work all day."
...
</span></pre>

  <p class="calibre15"><span class="calibre4">To end the function, you have to enter an empty line (this is not necessary in a script).</span></p>

  <p class="calibre15"><span class="calibre4">Defining a function creates a variable with the same name.</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; print print_lyrics
&lt;function print_lyrics at 0xb7e99e9c&gt;
&gt;&gt;&gt; print type(print_lyrics)
&lt;type 'function'&gt;
</span></pre>

  <p class="calibre15"><span class="calibre4">The value of <code class="calibre7">print_lyrics</code> is a <b class="calibre19">function object</b>, which has type <code class="calibre7">'function'</code>.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default226"></a> <a class="calibre16" id="@default227"></a></p>

  <p class="calibre15"><span class="calibre4">The syntax for calling the new function is the same as for built-in functions:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; print_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
</span></pre>

  <p class="calibre15"><span class="calibre4">Once you have defined a function, you can use it inside another function. For example, to repeat the previous refrain, we could write a function called <code class="calibre7">repeat_lyrics</code>:</span></p>
  <pre class="verbatim"><span class="calibre20">def repeat_lyrics():
    print_lyrics()
    print_lyrics()
</span></pre>

  <p class="calibre15"><span class="calibre4">And then call <code class="calibre7">repeat_lyrics</code>:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; repeat_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
</span></pre>

  <p class="calibre15"><span class="calibre4">But that’s not really how the song goes.</span></p>
</body>
</html>
