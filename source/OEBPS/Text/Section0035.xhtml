<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Functions</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}
  /*]]>*/
  </style>
</head>

<body class="calibre">
  <h2 class="section sigilNotInTOC" id="heading_id_17"><a class="calibre14" id="toc38"></a><a class="calibre14" id="htoc43"><span class="calibre18">3.15</span></a><span class="calibre18">&nbsp;&nbsp;Exercises</span></h2>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;3</b>&nbsp;&nbsp;</span>

    <p class="calibre15"><a class="calibre16" id="@default285"></a> <a class="calibre16" id="@default286"></a></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Python provides a built-in function called <tt class="calibre7">len</tt> that returns the length of a string, so the value of <code class="calibre7">len('allen')</code> is 5.</em></span></p>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Write a function named <code class="calibre7">right_justify</code> that takes a string named <tt class="calibre7">s</tt> as a parameter and prints the string with enough leading spaces so that the last letter of the string is in column 70 of the display.</em></span></p>
    <pre class="verbatim"><span class="calibre20"><em class="calibre9">&gt;&gt;&gt; right_justify('allen')
                                                                 allen
</em></span></pre>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;4</b>&nbsp;&nbsp;</span> <a class="calibre16" id="@default287"></a> <a class="calibre16" id="@default288"></a>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">A function object is a value you can assign to a variable or pass as an argument. For example, <code class="calibre7">do_twice</code> is a function that takes a function object as an argument and calls it twice:</em></span></p>
    <pre class="verbatim"><span class="calibre20"><em class="calibre9">def do_twice(f):
    f()
    f()
</em></span></pre>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">Here’s an example that uses <code class="calibre7">do_twice</code> to call a function named <code class="calibre7">print_spam</code> twice.</em></span></p>
    <pre class="verbatim"><span class="calibre20"><em class="calibre9">def print_spam():
    print 'spam'

do_twice(print_spam)
</em></span></pre>

    <ol class="enumerate" type="1">
      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Type this example into a script and test it.</em></span></li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Modify <code class="calibre7">do_twice</code> so that it takes two arguments, a function object and a value, and calls the function twice, passing the value as an argument.</em></span></li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Write a more general version of <code class="calibre7">print_spam</code>, called <code class="calibre7">print_twice</code>, that takes a string as a parameter and prints it twice.</em></span></li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Use the modified version of <code class="calibre7">do_twice</code> to call <code class="calibre7">print_twice</code> twice, passing <code class="calibre7">'spam'</code> as an argument.</em></span></li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Define a new function called <code class="calibre7">do_four</code> that takes a function object and a value and calls the function four times, passing the value as a parameter. There should be only two statements in the body of this function, not four.</em></span></li>
    </ol>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You can see my solution at <tt class="calibre7">thinkpython.com/code/do_four.py</tt>.</em></span></p>
  </div>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;5</b>&nbsp;&nbsp; <em class="calibre9">This exercise</em></span><em class="calibre9"><sup class="calibre10"><a class="calibre3" href="#note7" id="text7"><span class="calibre4">2</span></a></sup></em> <span class="calibre4"><em class="calibre9">can be done using only the statements and other features we have learned so far.</em></span>

    <p class="calibre15"><a class="calibre16" id="@default289"></a></p>

    <ol class="enumerate" type="1">
      <li class="li-itemize">
        <span class="calibre4"><em class="calibre9">Write a function that draws a grid like the following:</em></span>
        <pre class="verbatim"><span class="calibre20"><em class="calibre9">+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
</em></span></pre>

        <p class="calibre15"><span class="calibre4"><em class="calibre9">Hint: to print more than one value on a line, you can print a comma-separated sequence:</em></span></p>
        <pre class="verbatim"><span class="calibre20"><em class="calibre9">print '+', '-'
</em></span></pre>

        <p class="calibre15"><span class="calibre4"><em class="calibre9">If the sequence ends with a comma, Python leaves the line unfinished, so the value printed next appears on the same line.</em></span></p>
        <pre class="verbatim"><span class="calibre20"><em class="calibre9">print '+', 
print '-'
</em></span></pre>

        <p class="calibre15"><span class="calibre4"><em class="calibre9">The output of these statements is <code class="calibre7">'+ -'</code>.</em></span></p>

        <p class="calibre15"><span class="calibre4"><em class="calibre9">A <tt class="calibre7">print</tt> statement all by itself ends the current line and goes to the next line.</em></span></p>
      </li>

      <li class="li-itemize"><span class="calibre4"><em class="calibre9">Use the previous function to draw a similar grid with four rows and four columns.</em></span></li>
    </ol>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">You can see my solution at <tt class="calibre7">thinkpython.com/code/grid.py</tt>.</em></span></p>
  </div>
  <hr class="footnoterule" />

  <dl class="thefootnotes">
    <dt class="dt-description"><a class="calibre3" href="#text6" id="note6"><span class="calibre4">1</span></a></dt>

    <dd class="dd-thefootnotes"><span class="calibre4">We will see exceptions to this rule later.</span></dd>

    <dt class="dt-description"><a class="calibre3" href="#text7" id="note7"><span class="calibre4">2</span></a></dt>

    <dd class="dd-thefootnotes"><span class="calibre4">Based on an exercise in Oualline, <em class="calibre9">Practical C Programming, Third Edition</em>, O’Reilly (1997)</span></dd>
  </dl>
</body>
</html>
