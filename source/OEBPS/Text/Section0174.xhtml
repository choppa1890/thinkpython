<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Classes and methods</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <h2 class="section sigilNotInTOC" id="heading_id_12"><a class="calibre14" id="toc190"></a><a class="calibre14" id="htoc209"><span class="calibre18">17.10</span></a><span class="calibre18">&nbsp;&nbsp;Debugging</span></h2>

  <p class="calibre15"><a class="calibre16" id="@default1536"></a></p>

  <p class="calibre15"><span class="calibre4">It is legal to add attributes to objects at any point in the execution of a program, but if you are a stickler for type theory, it is a dubious practice to have objects of the same type with different attribute sets. It is usually a good idea to initialize all of an objects attributes in the init method.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1537"></a> <a class="calibre16" id="@default1538"></a></p>

  <p class="calibre15"><span class="calibre4">If you are not sure whether an object has a particular attribute, you can use the built-in function <tt class="calibre7">hasattr</tt> (see Section&nbsp;</span><a class="calibre3" href="../Text/Section0157.xhtml#hasattr"><span class="calibre4">15.7</span></a><span class="calibre4">).</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1539"></a> <a class="calibre16" id="@default1540"></a> <a class="calibre16" id="@default1541"></a> <a class="calibre16" id="@default1542"></a></p>

  <p class="calibre15"><span class="calibre4">Another way to access the attributes of an object is through the special attribute <code class="calibre7">__dict__</code>, which is a dictionary that maps attribute names (as strings) and values:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; p = Point(3, 4)
&gt;&gt;&gt; print p.__dict__
{'y': 4, 'x': 3}
</span></pre>

  <p class="calibre15"><span class="calibre4">For purposes of debugging, you might find it useful to keep this function handy:</span></p>
  <pre class="verbatim"><span class="calibre20">def print_attributes(obj):
    for attr in obj.__dict__:
        print attr, getattr(obj, attr)
</span></pre>

  <p class="calibre15"><span class="calibre4"><code class="calibre7">print_attributes</code> traverses the items in the object’s dictionary and prints each attribute name and its corresponding value.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1543"></a> <a class="calibre16" id="@default1544"></a></p>

  <p class="calibre15"><span class="calibre4">The built-in function <tt class="calibre7">getattr</tt> takes an object and an attribute name (as a string) and returns the attribute’s value.</span></p>
</body>
</html>
