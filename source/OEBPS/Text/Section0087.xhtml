<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Strings</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <h2 class="section sigilNotInTOC" id="heading_id_13"><a class="calibre14" id="toc95"></a><a class="calibre14" id="htoc105"><span class="calibre18">8.11</span></a><span class="calibre18">&nbsp;&nbsp;Debugging</span></h2>

  <p class="calibre15"><a class="calibre16" id="@default637"></a></p>

  <p class="calibre15"><a class="calibre16" id="@default638"></a></p>

  <p class="calibre15"><span class="calibre4">When you use indices to traverse the values in a sequence, it is tricky to get the beginning and end of the traversal right. Here is a function that is supposed to compare two words and return <tt class="calibre7">True</tt> if one of the words is the reverse of the other, but it contains two errors:</span></p>
  <pre class="verbatim"><span class="calibre20">def is_reverse(word1, word2):
    if len(word1) != len(word2):
        return False
    
    i = 0
    j = len(word2)

    while j &gt; 0:
        if word1[i] != word2[j]:
            return False
        i = i+1
        j = j-1

    return True
</span></pre>

  <p class="calibre15"><span class="calibre4">The first <tt class="calibre7">if</tt> statement checks whether the words are the same length. If not, we can return <tt class="calibre7">False</tt> immediately and then, for the rest of the function, we can assume that the words are the same length. This is an example of the guardian pattern in Section&nbsp;</span><a class="calibre3" href="../Text/Section0066.xhtml#guardian"><span class="calibre4">6.8</span></a><span class="calibre4">.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default639"></a> <a class="calibre16" id="@default640"></a> <a class="calibre16" id="@default641"></a></p>

  <p class="calibre15"><span class="calibre4"><tt class="calibre7">i</tt> and <tt class="calibre7">j</tt> are indices: <tt class="calibre7">i</tt> traverses <tt class="calibre7">word1</tt> forward while <tt class="calibre7">j</tt> traverses <tt class="calibre7">word2</tt> backward. If we find two letters that don’t match, we can return <tt class="calibre7">False</tt> immediately. If we get through the whole loop and all the letters match, we return <tt class="calibre7">True</tt>.</span></p>

  <p class="calibre15"><span class="calibre4">If we test this function with the words “pots” and “stop”, we expect the return value <tt class="calibre7">True</tt>, but we get an IndexError:</span></p>

  <p class="calibre15"><a class="calibre16" id="@default642"></a> <a class="calibre16" id="@default643"></a></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; is_reverse('pots', 'stop')
...
  File "reverse.py", line 15, in is_reverse
    if word1[i] != word2[j]:
IndexError: string index out of range
</span></pre>

  <p class="calibre15"><span class="calibre4">For debugging this kind of error, my first move is to print the values of the indices immediately before the line where the error appears.</span></p>
  <pre class="verbatim"><span class="calibre20">    while j &gt; 0:
        print i, j        # print here
        
        if word1[i] != word2[j]:
            return False
        i = i+1
        j = j-1
</span></pre>

  <p class="calibre15"><span class="calibre4">Now when I run the program again, I get more information:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; is_reverse('pots', 'stop')
0 4
...
IndexError: string index out of range
</span></pre>

  <p class="calibre15"><span class="calibre4">The first time through the loop, the value of <tt class="calibre7">j</tt> is 4, which is out of range for the string <code class="calibre7">'pots'</code>. The index of the last character is 3, so the initial value for <tt class="calibre7">j</tt> should be <tt class="calibre7">len(word2)-1</tt>.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default644"></a> <a class="calibre16" id="@default645"></a></p>

  <p class="calibre15"><span class="calibre4">If I fix that error and run the program again, I get:</span></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; is_reverse('pots', 'stop')
0 3
1 2
2 1
True
</span></pre>

  <p class="calibre15"><span class="calibre4">This time we get the right answer, but it looks like the loop only ran three times, which is suspicious. To get a better idea of what is happening, it is useful to draw a state diagram. During the first iteration, the frame for <code class="calibre7">is_reverse</code> looks like this:</span></p>

  <p class="calibre15"><a class="calibre16" id="@default646"></a> <a class="calibre16" id="@default647"></a></p>

  <div class="center">
    <span class="calibre4"><img alt="" class="calibre21" src="../Images/book012.gif" /></span>
  </div>

  <p class="calibre15"><span class="calibre4">I took a little license by arranging the variables in the frame and adding dotted lines to show that the values of <tt class="calibre7">i</tt> and <tt class="calibre7">j</tt> indicate characters in <tt class="calibre7">word1</tt> and <tt class="calibre7">word2</tt>.</span></p>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;8</b>&nbsp;&nbsp; <a class="calibre16" id="is_reverse"></a> <em class="calibre9">Starting with this diagram, execute the program on paper, changing the values of <tt class="calibre7">i</tt> and <tt class="calibre7">j</tt> during each iteration. Find and fix the second error in this function.</em></span>
  </div>
</body>
</html>
