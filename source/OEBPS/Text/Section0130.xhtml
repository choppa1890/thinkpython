<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="hevea 1.10" name="GENERATOR" />

  <title>Case study: data structure selection</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
/*<![CDATA[*/

  @page { margin-bottom: 5.000000pt; margin-top: 5.000000pt; }

  span.sgc-1 {font-weight: bold}

  body.sgc-2 {word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;}
  /*]]>*/
  </style>
</head>

<body class="calibre sgc-2">
  <h2 class="section sigilNotInTOC" id="heading_id_4"><a class="calibre14" id="toc142"></a><a class="calibre14" id="htoc157"><span class="calibre18">13.2</span></a><span class="calibre18">&nbsp;&nbsp;Random numbers</span></h2>

  <p class="calibre15"><a class="calibre16" id="@default1177"></a> <a class="calibre16" id="@default1178"></a> <a class="calibre16" id="@default1179"></a> <a class="calibre16" id="@default1180"></a></p>

  <p class="calibre15"><span class="calibre4">Given the same inputs, most computer programs generate the same outputs every time, so they are said to be <b class="calibre19">deterministic</b>. Determinism is usually a good thing, since we expect the same calculation to yield the same result. For some applications, though, we want the computer to be unpredictable. Games are an obvious example, but there are more.</span></p>

  <p class="calibre15"><span class="calibre4">Making a program truly nondeterministic turns out to be not so easy, but there are ways to make it at least seem nondeterministic. One of them is to use algorithms that generate <b class="calibre19">pseudorandom</b> numbers. Pseudorandom numbers are not truly random because they are generated by a deterministic computation, but just by looking at the numbers it is all but impossible to distinguish them from random.</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1181"></a> <a class="calibre16" id="@default1182"></a></p>

  <p class="calibre15"><span class="calibre4">The <tt class="calibre7">random</tt> module provides functions that generate pseudorandom numbers (which I will simply call “random” from here on).</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1183"></a> <a class="calibre16" id="@default1184"></a></p>

  <p class="calibre15"><span class="calibre4">The function <tt class="calibre7">random</tt> returns a random float between 0.0 and 1.0 (including 0.0 but not 1.0). Each time you call <tt class="calibre7">random</tt>, you get the next number in a long series. To see a sample, run this loop:</span></p>
  <pre class="verbatim"><span class="calibre20">import random

for i in range(10):
    x = random.random()
    print x
</span></pre>

  <p class="calibre15"><span class="calibre4">The function <tt class="calibre7">randint</tt> takes parameters <tt class="calibre7">low</tt> and <tt class="calibre7">high</tt> and returns an integer between <tt class="calibre7">low</tt> and <tt class="calibre7">high</tt> (including both).</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1185"></a> <a class="calibre16" id="@default1186"></a></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; random.randint(5, 10)
5
&gt;&gt;&gt; random.randint(5, 10)
9
</span></pre>

  <p class="calibre15"><span class="calibre4">To choose an element from a sequence at random, you can use <tt class="calibre7">choice</tt>:</span></p>

  <p class="calibre15"><a class="calibre16" id="@default1187"></a> <a class="calibre16" id="@default1188"></a></p>
  <pre class="verbatim"><span class="calibre20">&gt;&gt;&gt; t = [1, 2, 3]
&gt;&gt;&gt; random.choice(t)
2
&gt;&gt;&gt; random.choice(t)
3
</span></pre>

  <p class="calibre15"><span class="calibre4">The <tt class="calibre7">random</tt> module also provides functions to generate random values from continuous distributions including Gaussian, exponential, gamma, and a few more.</span></p>

  <div class="theorem">
    <span class="calibre4"><b class="calibre19">Exercise&nbsp;5</b>&nbsp;&nbsp;</span>

    <p class="calibre15"><a class="calibre16" id="@default1189"></a></p>

    <p class="calibre15"><em class="calibre9"><span class="calibre4">Write a function named <code class="calibre7">choose_from_hist</code> that takes a histogram as defined in Section&nbsp;</span><a class="calibre3" href="../Text/Section0110.xhtml#histogram"><span class="calibre4">11.1</span></a> <span class="calibre4">and returns a random value from the histogram, chosen with probability in proportion to frequency. For example, for this histogram:</span></em></p>
    <pre class="verbatim"><span class="calibre20"><em class="calibre9">&gt;&gt;&gt; t = ['a', 'a', 'b']
&gt;&gt;&gt; h = histogram(t)
&gt;&gt;&gt; print h
{'a': 2, 'b': 1}
</em></span></pre>

    <p class="calibre15"><span class="calibre4"><em class="calibre9">your function should <tt class="calibre7">’a’</tt> with probability 2/3 and <code class="calibre7">'b'</code> with probability 1/3.</em></span></p>
  </div>
</body>
</html>
